#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* insertAtBeginning(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = head;
    return newNode;
}

struct Node* insertAtEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);

    if (head == NULL) {
        return newNode;
    }

    struct Node* current = head;
    while (current->next != NULL) {
        current = current->next;
    }

    current->next = newNode;
    return head;
}

struct Node* insertAtMid(struct Node* head, int data, int position) {
    if (position < 1) {
        printf("Invalid position for insertion.\n");
        return head;
    }

    struct Node* newNode = createNode(data);

    if (position == 1) {
        newNode->next = head;
        return newNode;
    }

    struct Node* current = head;
    int count = 1;

    while (count < position - 1 && current != NULL) {
        current = current->next;
        count++;
    }

    if (current == NULL) {
        printf("Invalid position for insertion.\n");
        return head;
    }

    newNode->next = current->next;
    current->next = newNode;

    return head;
}

struct Node* deleteAtBeginning(struct Node* head) {
    if (head == NULL) {
        printf("List is empty. Nothing to delete.\n");
        return head;
    }

    struct Node* temp = head;
    head = head->next;
    free(temp);

    return head;
}

struct Node* deleteAtEnd(struct Node* head) {
    if (head == NULL) {
        printf("List is empty. Nothing to delete.\n");
        return head;
    }

    if (head->next == NULL) {
        free(head);
        return NULL;
    }

    struct Node* current = head;
    while (current->next->next != NULL) {
        current = current->next;
    }

    free(current->next);
    current->next = NULL;

    return head;
}

struct Node* deleteAtMid(struct Node* head, int position) {
    if (head == NULL || position < 1) {
        printf("Invalid position for deletion.\n");
        return head;
    }

    if (position == 1) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
        return head;
    }

    struct Node* current = head;
    int count = 1;

    while (count < position - 1 && current != NULL) {
        current = current->next;
        count++;
    }

    if (current == NULL || current->next == NULL) {
        printf("Invalid position for deletion.\n");
        return head;
    }

    struct Node* temp = current->next;
    current->next = current->next->next;
    free(temp);

    return head;
}

void display(struct Node* head) {
    printf("Linked List: ");
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int search(struct Node* head, int key) {
    struct Node* current = head;
    int position = 1;

    while (current != NULL) {
        if (current->data == key) {
            return position;
        }

        current = current->next;
        position++;
    }

    return -1; 
}

struct Node* sort(struct Node* head) {
    struct Node *current, *index;
    int temp;

    if (head == NULL) {
        return head;
    } else {
        for (current = head; current->next != NULL; current = current->next) {
            for (index = current->next; index != NULL; index = index->next) {
                if (current->data > index->data) {
                    temp = current->data;
                    current->data = index->data;
                    index->data = temp;
                }
            }
        }
    }

    return head;
}

void findMaxMin(struct Node* head, int* max, int* min) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    *max = head->data;
    *min = head->data;

    struct Node* current = head;
    while (current != NULL) {
        if (current->data > *max) {
            *max = current->data;
        }
        if (current->data < *min) {
            *min = current->data;
        }
        current = current->next;
    }
}

int main() {
    struct Node* head = NULL;
    printf("192324112-sree ruthin reddy\n");
    head = insertAtBeginning(head, 10);
    head = insertAtBeginning(head, 20);
    display(head);

    head = insertAtEnd(head, 30);
    head = insertAtEnd(head, 40);
    display(head);

    head = insertAtMid(head, 25, 2);
    display(head);

    head = deleteAtBeginning(head);
    display(head);

    head = deleteAtEnd(head);
    display(head);

    head = deleteAtMid(head, 2);
    display(head);

    int position = search(head, 30);
    if (position != -1) {
        printf("Element 30 found at position %d\n", position);
    } else {
        printf("Element 30 not found in the list\n");
    }

    head = sort(head);
    display(head);

    int max, min;
    findMaxMin(head, &max, &min);
    printf("Maximum element in the list: %d\n", max);
    printf("Minimum element in the list: %d\n", min);

    return 0;
}
